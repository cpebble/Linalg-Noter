using System;
using System.Linq;
using System.Collections.Generic;
using Core;

namespace ProjectB
{
    public static partial class MainClass
    {
        //For info: numpy.random.seed(15143543)



        // data for ElementaryRowScaling() test.
        // a size 3 list of arguments for the test routine.
        private static readonly List<object> RowScaling_L = new List<object>();

        // random dimensions matrix, (m, n) = (10, 5)
        private static readonly double[,] Temp001 =
        {
            {6.720000, -0.760000, -4.070000, -6.980000, 5.910000},
            {-7.140000, -3.280000, 1.300000, -2.840000, -4.810000},
            {-6.890000, 0.700000, -3.370000, 5.410000, -9.370000},
            {-6.730000, 4.570000, -3.930000, -2.630000, 6.080000},
            {-4.610000, -4.480000, -6.750000, -7.600000, -0.780000},
            {-4.720000, 7.110000, -3.600000, -0.380000, 1.660000},
            {0.210000, 8.830000, 4.040000, -8.690000, 9.650000},
            {7.890000, 6.490000, -6.420000, -7.850000, -1.150000},
            {9.210000, -6.540000, -4.240000, -3.210000, 8.170000},
            {-6.450000, -8.500000, 1.550000, -4.400000, 7.790000}
        };
        private static readonly int Temp002 = 7;
        private static readonly double Temp003 = 7.940000;
        private static readonly double[,] Temp004 =
        {
            {6.720000, -0.760000, -4.070000, -6.980000, 5.910000},
            {-7.140000, -3.280000, 1.300000, -2.840000, -4.810000},
            {-6.890000, 0.700000, -3.370000, 5.410000, -9.370000},
            {-6.730000, 4.570000, -3.930000, -2.630000, 6.080000},
            {-4.610000, -4.480000, -6.750000, -7.600000, -0.780000},
            {-4.720000, 7.110000, -3.600000, -0.380000, 1.660000},
            {0.210000, 8.830000, 4.040000, -8.690000, 9.650000},
            {62.646600, 51.530600, -50.974800, -62.329000, -9.131000},
            {9.210000, -6.540000, -4.240000, -3.210000, 8.170000},
            {-6.450000, -8.500000, 1.550000, -4.400000, 7.790000}
        };
        // random dimensions matrix, (m, n) = (10, 3)
        private static readonly double[,] Temp006 =
        {
            {-8.610000, 0.230000, -5.640000},
            {-0.660000, -8.190000, 5.940000},
            {7.510000, 0.340000, 1.400000},
            {3.760000, 2.010000, 0.920000},
            {4.400000, 0.060000, -0.440000},
            {-6.910000, 2.170000, -4.860000},
            {0.490000, 2.440000, 0.220000},
            {6.560000, 6.720000, -7.900000},
            {8.170000, -7.230000, 2.060000},
            {-7.740000, -8.750000, 8.690000}
        };
        private static readonly int Temp007 = 9;
        private static readonly double Temp008 = 8.070000;
        private static readonly double[,] Temp009 =
        {
            {-8.610000, 0.230000, -5.640000},
            {-0.660000, -8.190000, 5.940000},
            {7.510000, 0.340000, 1.400000},
            {3.760000, 2.010000, 0.920000},
            {4.400000, 0.060000, -0.440000},
            {-6.910000, 2.170000, -4.860000},
            {0.490000, 2.440000, 0.220000},
            {6.560000, 6.720000, -7.900000},
            {8.170000, -7.230000, 2.060000},
            {-62.461800, -70.612500, 70.128300}
        };
        // random dimensions matrix, (m, n) = (3, 12)
        private static readonly double[,] Temp011 =
        {
            {-5.630000, -4.340000, -4.850000, 9.870000, 9.060000, -1.940000, 2.640000, 5.460000, -2.520000, -0.090000, 0.380000, -9.280000},
            {5.470000, 2.420000, -2.270000, -7.460000, -9.160000, -7.720000, 5.530000, 1.780000, 7.710000, -2.970000, -7.480000, 1.730000},
            {-8.520000, 1.700000, -1.950000, -4.560000, 3.090000, -7.780000, -0.350000, -5.370000, -9.340000, 1.360000, -8.050000, 2.230000}
        };
        private static readonly int Temp012 = 1;
        private static readonly double Temp013 = 1.970000;
        private static readonly double[,] Temp014 =
        {
            {-5.630000, -4.340000, -4.850000, 9.870000, 9.060000, -1.940000, 2.640000, 5.460000, -2.520000, -0.090000, 0.380000, -9.280000},
            {10.775900, 4.767400, -4.471900, -14.696200, -18.045200, -15.208400, 10.894100, 3.506600, 15.188700, -5.850900, -14.735600, 3.408100},
            {-8.520000, 1.700000, -1.950000, -4.560000, 3.090000, -7.780000, -0.350000, -5.370000, -9.340000, 1.360000, -8.050000, 2.230000}
        };


        // data for ElementaryRowInterchange() test.
        // a size 3 list of arguments for the test routine.
        private static readonly List<object> RowInterChange_L = new List<object>();

        // random dimensions matrix, (m, n) = (6, 4)
        private static readonly double[,] Temp016 =
        {
            {-6.080000, 1.990000, -5.150000, -0.480000},
            {-4.380000, -3.350000, 7.300000, -3.750000},
            {-2.120000, -9.090000, 8.550000, 3.350000},
            {-9.110000, -6.270000, -6.380000, 8.640000},
            {3.420000, -0.900000, -6.720000, -6.750000},
            {-0.960000, 2.530000, 6.180000, 9.280000}
        };
        private static readonly int Temp017 = 1;
        private static readonly int Temp018 = 0;
        private static readonly double[,] Temp019 =
        {
            {-4.380000, -3.350000, 7.300000, -3.750000},
            {-6.080000, 1.990000, -5.150000, -0.480000},
            {-2.120000, -9.090000, 8.550000, 3.350000},
            {-9.110000, -6.270000, -6.380000, 8.640000},
            {3.420000, -0.900000, -6.720000, -6.750000},
            {-0.960000, 2.530000, 6.180000, 9.280000}
        };
        // random dimensions matrix, (m, n) = (5, 12)
        private static readonly double[,] Temp021 =
        {
            {-8.390000, -9.740000, 8.380000, 8.510000, 5.260000, -9.730000, -0.280000, 6.530000, -5.490000, 7.260000, 7.590000, 8.020000},
            {-0.750000, -4.480000, -0.080000, -5.170000, -0.180000, 5.890000, 5.090000, 5.170000, 5.060000, -0.350000, 4.730000, -9.360000},
            {-4.570000, -0.550000, -1.690000, 7.640000, -3.500000, 7.150000, -6.440000, 6.130000, -2.810000, 3.610000, -5.940000, 7.010000},
            {8.290000, -4.250000, -4.390000, -4.930000, -3.940000, 1.020000, 0.120000, 1.280000, -3.690000, -3.100000, 4.260000, -2.470000},
            {-2.350000, 0.770000, 5.660000, -8.930000, 5.970000, 3.840000, -7.630000, 2.180000, -5.380000, 2.320000, 7.430000, 0.280000}
        };
        private static readonly int Temp022 = 0;
        private static readonly int Temp023 = 1;
        private static readonly double[,] Temp024 =
        {
            {-0.750000, -4.480000, -0.080000, -5.170000, -0.180000, 5.890000, 5.090000, 5.170000, 5.060000, -0.350000, 4.730000, -9.360000},
            {-8.390000, -9.740000, 8.380000, 8.510000, 5.260000, -9.730000, -0.280000, 6.530000, -5.490000, 7.260000, 7.590000, 8.020000},
            {-4.570000, -0.550000, -1.690000, 7.640000, -3.500000, 7.150000, -6.440000, 6.130000, -2.810000, 3.610000, -5.940000, 7.010000},
            {8.290000, -4.250000, -4.390000, -4.930000, -3.940000, 1.020000, 0.120000, 1.280000, -3.690000, -3.100000, 4.260000, -2.470000},
            {-2.350000, 0.770000, 5.660000, -8.930000, 5.970000, 3.840000, -7.630000, 2.180000, -5.380000, 2.320000, 7.430000, 0.280000}
        };
        // random dimensions matrix, (m, n) = (13, 12)
        private static readonly double[,] Temp026 =
        {
            {9.920000, -8.800000, -3.060000, 4.810000, 2.200000, -5.750000, -9.080000, 1.910000, -7.740000, 9.680000, -9.240000, -1.310000},
            {-5.420000, 2.170000, 8.740000, -6.360000, 2.300000, -7.920000, 0.180000, 8.630000, -7.890000, 6.780000, 8.480000, 1.460000},
            {-4.980000, -4.380000, -6.770000, 4.250000, -6.160000, -7.240000, -1.480000, 8.950000, 1.170000, 2.350000, -6.010000, -6.190000},
            {5.770000, -3.280000, 0.030000, -5.510000, 0.330000, 4.050000, 1.760000, -8.130000, -8.290000, -6.230000, -2.960000, 8.940000},
            {-9.060000, 1.840000, 7.600000, -2.800000, -9.410000, -4.070000, -6.480000, 5.540000, 8.770000, 8.980000, -3.510000, 8.580000},
            {7.650000, 4.030000, -6.220000, 0.270000, -5.410000, -4.320000, -2.210000, 6.010000, -9.150000, 7.890000, 6.780000, -9.600000},
            {-1.110000, 3.330000, 2.330000, 9.190000, 9.650000, 1.440000, 2.380000, 4.710000, 0.710000, -8.950000, 6.900000, -0.660000},
            {-3.960000, -5.020000, 7.360000, -6.090000, 5.380000, -4.820000, -7.860000, 9.200000, -7.500000, 1.220000, -9.790000, -8.480000},
            {7.760000, -4.740000, 8.640000, 8.230000, 2.320000, -2.680000, 4.670000, 2.940000, -9.010000, -7.030000, -6.400000, -9.080000},
            {-9.430000, 6.240000, -3.300000, -3.530000, -6.350000, 8.580000, 0.170000, 3.420000, -6.290000, -8.820000, -0.760000, -0.340000},
            {-9.260000, 2.730000, -2.100000, 7.660000, 4.530000, -1.180000, -5.200000, -4.860000, 0.040000, -1.180000, 3.560000, 4.500000},
            {-1.870000, -7.870000, -2.850000, 6.550000, -1.330000, 3.390000, -1.370000, -9.000000, 1.020000, 2.340000, 3.030000, -8.010000},
            {-3.970000, -2.680000, -4.650000, -5.550000, -6.380000, 5.860000, 0.180000, 7.570000, -4.140000, -7.160000, -1.490000, 8.140000}
        };
        private static readonly int Temp027 = 1;
        private static readonly int Temp028 = 2;
        private static readonly double[,] Temp029 =
        {
            {9.920000, -8.800000, -3.060000, 4.810000, 2.200000, -5.750000, -9.080000, 1.910000, -7.740000, 9.680000, -9.240000, -1.310000},
            {-4.980000, -4.380000, -6.770000, 4.250000, -6.160000, -7.240000, -1.480000, 8.950000, 1.170000, 2.350000, -6.010000, -6.190000},
            {-5.420000, 2.170000, 8.740000, -6.360000, 2.300000, -7.920000, 0.180000, 8.630000, -7.890000, 6.780000, 8.480000, 1.460000},
            {5.770000, -3.280000, 0.030000, -5.510000, 0.330000, 4.050000, 1.760000, -8.130000, -8.290000, -6.230000, -2.960000, 8.940000},
            {-9.060000, 1.840000, 7.600000, -2.800000, -9.410000, -4.070000, -6.480000, 5.540000, 8.770000, 8.980000, -3.510000, 8.580000},
            {7.650000, 4.030000, -6.220000, 0.270000, -5.410000, -4.320000, -2.210000, 6.010000, -9.150000, 7.890000, 6.780000, -9.600000},
            {-1.110000, 3.330000, 2.330000, 9.190000, 9.650000, 1.440000, 2.380000, 4.710000, 0.710000, -8.950000, 6.900000, -0.660000},
            {-3.960000, -5.020000, 7.360000, -6.090000, 5.380000, -4.820000, -7.860000, 9.200000, -7.500000, 1.220000, -9.790000, -8.480000},
            {7.760000, -4.740000, 8.640000, 8.230000, 2.320000, -2.680000, 4.670000, 2.940000, -9.010000, -7.030000, -6.400000, -9.080000},
            {-9.430000, 6.240000, -3.300000, -3.530000, -6.350000, 8.580000, 0.170000, 3.420000, -6.290000, -8.820000, -0.760000, -0.340000},
            {-9.260000, 2.730000, -2.100000, 7.660000, 4.530000, -1.180000, -5.200000, -4.860000, 0.040000, -1.180000, 3.560000, 4.500000},
            {-1.870000, -7.870000, -2.850000, 6.550000, -1.330000, 3.390000, -1.370000, -9.000000, 1.020000, 2.340000, 3.030000, -8.010000},
            {-3.970000, -2.680000, -4.650000, -5.550000, -6.380000, 5.860000, 0.180000, 7.570000, -4.140000, -7.160000, -1.490000, 8.140000}
        };


        // data for ElementaryRowReplacement() test.
        // a size 3 list of arguments for the test routine.
        private static readonly List<object> RowReplacement_L = new List<object>();

        // random dimensions matrix, (m, n) = (14, 9)
        private static readonly double[,] Temp031 =
        {
            {-5.750000, 3.860000, 9.180000, 5.630000, 2.390000, 0.810000, 1.920000, 0.730000, -2.930000},
            {0.180000, -2.300000, 3.740000, 4.120000, 9.110000, 5.370000, 2.340000, 3.320000, 7.270000},
            {-7.610000, -0.120000, 0.410000, 6.580000, 7.040000, 4.430000, -9.840000, -7.230000, -9.800000},
            {-3.360000, -8.380000, 1.560000, 0.670000, -6.930000, -2.890000, 8.230000, -0.360000, -7.670000},
            {-7.100000, 1.080000, 3.610000, -9.230000, -6.770000, -6.800000, -0.190000, 8.030000, 0.930000},
            {-9.210000, -2.740000, -7.210000, 5.420000, 8.160000, 6.130000, -1.500000, -3.580000, 4.450000},
            {-9.430000, 4.690000, -5.160000, 8.920000, 4.880000, -3.860000, 3.660000, -8.370000, 5.100000},
            {4.490000, -1.660000, -3.410000, 3.030000, 7.380000, -6.710000, 0.490000, 6.810000, -4.600000},
            {4.110000, 2.800000, -6.320000, 1.120000, -1.070000, -4.250000, 4.090000, -3.730000, -9.790000},
            {-9.700000, 8.180000, -7.970000, 3.650000, -2.190000, 7.950000, -0.360000, 9.440000, -4.440000},
            {0.720000, -2.500000, 9.770000, -4.690000, -0.230000, -6.590000, -7.630000, 5.250000, -3.460000},
            {-4.350000, -3.450000, -5.430000, 5.390000, -7.510000, 0.960000, -2.120000, -9.690000, 6.060000},
            {3.840000, -4.680000, -9.410000, -2.430000, 7.150000, 0.690000, -2.200000, -8.640000, 1.010000},
            {-8.920000, -0.870000, 7.270000, 8.850000, 6.600000, 5.730000, 8.130000, -8.700000, -7.100000}
        };
        private static readonly int Temp032 = 10;
        private static readonly int Temp033 = 7;
        private static readonly double Temp034 = -7.710000;
        private static readonly double[,] Temp035 =
        {
            {-5.750000, 3.860000, 9.180000, 5.630000, 2.390000, 0.810000, 1.920000, 0.730000, -2.930000},
            {0.180000, -2.300000, 3.740000, 4.120000, 9.110000, 5.370000, 2.340000, 3.320000, 7.270000},
            {-7.610000, -0.120000, 0.410000, 6.580000, 7.040000, 4.430000, -9.840000, -7.230000, -9.800000},
            {-3.360000, -8.380000, 1.560000, 0.670000, -6.930000, -2.890000, 8.230000, -0.360000, -7.670000},
            {-7.100000, 1.080000, 3.610000, -9.230000, -6.770000, -6.800000, -0.190000, 8.030000, 0.930000},
            {-9.210000, -2.740000, -7.210000, 5.420000, 8.160000, 6.130000, -1.500000, -3.580000, 4.450000},
            {-9.430000, 4.690000, -5.160000, 8.920000, 4.880000, -3.860000, 3.660000, -8.370000, 5.100000},
            {4.490000, -1.660000, -3.410000, 3.030000, 7.380000, -6.710000, 0.490000, 6.810000, -4.600000},
            {4.110000, 2.800000, -6.320000, 1.120000, -1.070000, -4.250000, 4.090000, -3.730000, -9.790000},
            {-9.700000, 8.180000, -7.970000, 3.650000, -2.190000, 7.950000, -0.360000, 9.440000, -4.440000},
            {-33.897900, 10.298600, 36.061100, -28.051300, -57.129800, 45.144100, -11.407900, -47.255100, 32.006000},
            {-4.350000, -3.450000, -5.430000, 5.390000, -7.510000, 0.960000, -2.120000, -9.690000, 6.060000},
            {3.840000, -4.680000, -9.410000, -2.430000, 7.150000, 0.690000, -2.200000, -8.640000, 1.010000},
            {-8.920000, -0.870000, 7.270000, 8.850000, 6.600000, 5.730000, 8.130000, -8.700000, -7.100000}
        };
        // random dimensions matrix, (m, n) = (13, 14)
        private static readonly double[,] Temp037 =
        {
            {-9.960000, -3.010000, -4.340000, 3.330000, 1.860000, -7.490000, 4.690000, -2.120000, 5.160000, -8.680000, -7.320000, 9.380000, 3.600000, 5.190000},
            {-4.780000, 6.840000, 7.410000, -6.970000, 9.380000, -8.040000, 6.430000, -1.710000, 8.780000, 6.680000, -4.570000, -4.400000, -1.480000, -9.390000},
            {2.000000, -8.030000, 0.340000, 6.150000, -0.860000, -4.100000, 2.130000, -7.540000, 7.790000, -3.710000, 3.260000, -8.050000, 3.910000, -6.190000},
            {-8.300000, 4.730000, -2.170000, 3.530000, 6.730000, -1.610000, -2.790000, 6.030000, -2.820000, 0.680000, -2.940000, 2.400000, 5.780000, -5.120000},
            {5.180000, 5.280000, -6.690000, 1.710000, 1.910000, -7.490000, 5.860000, 9.860000, -3.150000, -5.150000, -6.050000, -9.790000, -7.840000, 2.210000},
            {-5.150000, 8.380000, 2.620000, 4.420000, -7.510000, 3.680000, -7.650000, -2.750000, 2.140000, -0.280000, 9.650000, -2.790000, 1.670000, -6.980000},
            {-5.320000, -6.630000, -6.980000, 7.090000, 1.980000, -8.120000, 8.580000, -7.570000, 4.710000, -8.030000, 3.590000, -2.940000, 9.640000, -4.550000},
            {0.410000, 7.870000, 5.210000, -5.310000, -1.970000, 1.890000, -9.090000, -3.000000, -2.980000, 6.770000, -10.000000, -2.260000, 0.100000, 7.640000},
            {-9.070000, -0.110000, -8.750000, -2.970000, -8.670000, 0.880000, -7.360000, 7.760000, 0.920000, 4.960000, 7.850000, -5.470000, -8.710000, 2.800000},
            {3.320000, 4.980000, -1.590000, -3.320000, 9.640000, -4.350000, 3.380000, -3.320000, -9.260000, -1.700000, 4.920000, 5.590000, -6.220000, 6.020000},
            {6.830000, -4.290000, -6.170000, -7.600000, -1.800000, -6.760000, -8.360000, -4.060000, -3.160000, 2.010000, -2.140000, 6.730000, 6.560000, -8.470000},
            {-8.890000, -8.930000, -2.790000, -1.190000, -1.460000, 5.810000, 0.850000, -3.680000, -1.590000, -3.110000, -2.440000, -0.230000, -8.950000, 4.170000},
            {-9.710000, 10.000000, -9.540000, 7.850000, 6.810000, -6.130000, 7.370000, 7.140000, 1.500000, 0.060000, 4.200000, 8.560000, 6.540000, 6.110000}
        };
        private static readonly int Temp038 = 0;
        private static readonly int Temp039 = 3;
        private static readonly double Temp040 = -9.850000;
        private static readonly double[,] Temp041 =
        {
            {71.795000, -49.600500, 17.034500, -31.440500, -64.430500, 8.368500, 32.171500, -61.515500, 32.937000, -15.378000, 21.639000, -14.260000, -53.333000, 55.622000},
            {-4.780000, 6.840000, 7.410000, -6.970000, 9.380000, -8.040000, 6.430000, -1.710000, 8.780000, 6.680000, -4.570000, -4.400000, -1.480000, -9.390000},
            {2.000000, -8.030000, 0.340000, 6.150000, -0.860000, -4.100000, 2.130000, -7.540000, 7.790000, -3.710000, 3.260000, -8.050000, 3.910000, -6.190000},
            {-8.300000, 4.730000, -2.170000, 3.530000, 6.730000, -1.610000, -2.790000, 6.030000, -2.820000, 0.680000, -2.940000, 2.400000, 5.780000, -5.120000},
            {5.180000, 5.280000, -6.690000, 1.710000, 1.910000, -7.490000, 5.860000, 9.860000, -3.150000, -5.150000, -6.050000, -9.790000, -7.840000, 2.210000},
            {-5.150000, 8.380000, 2.620000, 4.420000, -7.510000, 3.680000, -7.650000, -2.750000, 2.140000, -0.280000, 9.650000, -2.790000, 1.670000, -6.980000},
            {-5.320000, -6.630000, -6.980000, 7.090000, 1.980000, -8.120000, 8.580000, -7.570000, 4.710000, -8.030000, 3.590000, -2.940000, 9.640000, -4.550000},
            {0.410000, 7.870000, 5.210000, -5.310000, -1.970000, 1.890000, -9.090000, -3.000000, -2.980000, 6.770000, -10.000000, -2.260000, 0.100000, 7.640000},
            {-9.070000, -0.110000, -8.750000, -2.970000, -8.670000, 0.880000, -7.360000, 7.760000, 0.920000, 4.960000, 7.850000, -5.470000, -8.710000, 2.800000},
            {3.320000, 4.980000, -1.590000, -3.320000, 9.640000, -4.350000, 3.380000, -3.320000, -9.260000, -1.700000, 4.920000, 5.590000, -6.220000, 6.020000},
            {6.830000, -4.290000, -6.170000, -7.600000, -1.800000, -6.760000, -8.360000, -4.060000, -3.160000, 2.010000, -2.140000, 6.730000, 6.560000, -8.470000},
            {-8.890000, -8.930000, -2.790000, -1.190000, -1.460000, 5.810000, 0.850000, -3.680000, -1.590000, -3.110000, -2.440000, -0.230000, -8.950000, 4.170000},
            {-9.710000, 10.000000, -9.540000, 7.850000, 6.810000, -6.130000, 7.370000, 7.140000, 1.500000, 0.060000, 4.200000, 8.560000, 6.540000, 6.110000}
        };
        // random dimensions matrix, (m, n) = (7, 5)
        private static readonly double[,] Temp043 =
        {
            {-9.880000, 9.700000, 4.660000, -2.070000, -0.850000},
            {6.940000, 5.480000, -5.670000, 4.750000, -1.820000},
            {2.210000, -1.450000, 4.360000, -4.930000, -6.430000},
            {1.330000, 1.490000, 3.860000, -5.330000, 0.560000},
            {-7.000000, -7.970000, 0.980000, -6.920000, 8.990000},
            {9.620000, 9.050000, 2.380000, 0.470000, -8.350000},
            {-2.730000, -0.940000, 4.660000, -8.650000, 8.800000}
        };
        private static readonly int Temp044 = 2;
        private static readonly int Temp045 = 5;
        private static readonly double Temp046 = 2.340000;
        private static readonly double[,] Temp047 =
        {
            {-9.880000, 9.700000, 4.660000, -2.070000, -0.850000},
            {6.940000, 5.480000, -5.670000, 4.750000, -1.820000},
            {24.720800, 19.727000, 9.929200, -3.830200, -25.969000},
            {1.330000, 1.490000, 3.860000, -5.330000, 0.560000},
            {-7.000000, -7.970000, 0.980000, -6.920000, 8.990000},
            {9.620000, 9.050000, 2.380000, 0.470000, -8.350000},
            {-2.730000, -0.940000, 4.660000, -8.650000, 8.800000}
        };


        // data for ForwardReduction() test.
        // a size 3 list of arguments for the test routine.
        private static readonly List<object> SForwardReduction_L = new List<object>();


        // random dimensions matrix, (m, n) = (13, 11)
        private static readonly double[,] Temp049 =
        {
            {-7.380000, 5.980000, 9.220000, -188.770000, -8.270000, -86.850000, -202.400000, -502.870000, 88.260000, 96.080000, 300.970000},
            {5.690000, 7.630000, -9.370000, 51.360000, 7.880000, 63.380000, 193.680000, 388.070000, -227.690000, -37.960000, -109.980000},
            {8.280000, 6.690000, -1.380000, 60.380000, -0.880000, -103.510000, 10.760000, 111.500000, -142.100000, -36.860000, -15.540000},
            {-1.120000, 8.240000, -6.380000, -126.640000, -3.540000, 26.620000, -20.600000, -8.140000, 0.860000, -59.940000, 160.160000},
            {0.180000, 0.710000, 4.920000, 35.510000, 3.390000, -29.580000, 25.080000, -35.190000, -89.160000, 83.180000, -39.750000},
            {-0.960000, 4.200000, -7.400000, -72.300000, -0.300000, 69.860000, 37.680000, 100.780000, 1.000000, -62.200000, 59.980000},
            {-3.550000, -8.120000, 7.530000, 9.310000, -3.570000, -36.880000, -109.400000, -230.060000, 152.410000, 39.540000, 9.790000},
            {5.680000, 0.550000, 4.060000, 69.390000, -3.370000, -128.320000, -66.920000, -51.970000, -29.780000, -8.500000, -12.630000},
            {-4.860000, 6.950000, -3.420000, -105.090000, 4.810000, 100.480000, 87.760000, 35.470000, -94.660000, 52.960000, 71.010000},
            {-3.250000, 7.490000, -0.960000, -156.210000, -6.380000, -21.780000, -102.820000, -202.210000, 49.500000, -15.390000, 226.870000},
            {2.560000, 2.170000, 9.440000, 15.410000, -4.850000, -163.020000, -129.120000, -250.450000, -21.240000, 60.920000, 74.950000},
            {-3.270000, 9.070000, -6.750000, -170.980000, -4.160000, 47.140000, -32.600000, -54.050000, 24.170000, -54.900000, 207.000000},
            {-2.460000, -9.310000, 8.280000, 112.400000, 7.140000, 22.170000, 59.640000, -15.900000, -19.320000, 123.260000, -178.560000}
        };
        private static readonly double[,] Temp050 =
        {
            {-7.380000, 5.980000, 9.220000, -188.770000, -8.270000, -86.850000, -202.400000, -502.870000, 88.260000, 96.080000, 300.970000},
            {0.000000, 12.240596, -2.261355, -94.182182, 1.503808, -3.581585, 37.629051, 0.355867, -159.641301, 36.117940, 122.068686},
            {0.000000, -0.000000, 11.439801, -48.313440, -11.804692, -197.030852, -257.513874, -453.085163, 131.676064, 31.400276, 188.510178},
            {0.000000, -0.000000, 0.000000, -68.707133, -9.815305, -68.707133, -157.044875, -186.490789, 157.044875, -78.522438, 147.229571},
            {0.000000, -0.000000, 0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000},
            {-0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000},
            {0.000000, -0.000000, 0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, 0.000000},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, -0.000000},
            {0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000},
            {0.000000, 0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, 0.000000},
            {0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, 0.000000},
            {0.000000, -0.000000, -0.000000, 0.000000, -0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000},
            {0.000000, -0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000}
        };

        // random dimensions matrix, (m, n) = (3, 8)
        private static readonly double[,] Temp052 =
        {
            {5.180000, 4.590000, -0.180000, 8.460000, 5.610000, -7.480000, -5.890000, -0.910000},
            {-72.120000, -62.430000, 26.970000, -124.080000, -100.410000, 82.230000, 85.980000, 6.780000},
            {-1.860000, -2.140000, -8.090000, -0.940000, 5.420000, 9.990000, 0.790000, 2.290000}
        };
        private static readonly double[,] Temp053 =
        {
            {5.180000, 4.590000, -0.180000, 8.460000, 5.610000, -7.480000, -5.890000, -0.910000},
            {0.000000, 1.475560, 24.463900, -6.293282, -22.303205, -21.912394, 3.974826, -5.889730},
            {0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000}
        };

        // random dimensions matrix, (m, n) = (8, 9)
        private static readonly double[,] Temp055 =
        {
            {-39.120000, 100.680000, 50.280000, -18.360000, -33.120000, -40.680000, -54.000000, -114.960000, -8.880000},
            {-65.200000, 167.800000, 83.800000, -30.600000, -55.200000, -67.800000, -90.000000, -191.600000, -14.800000},
            {-9.780000, 25.170000, 12.570000, -4.590000, -8.280000, -10.170000, -13.500000, -28.740000, -2.220000},
            {29.340000, -75.510000, -37.710000, 13.770000, 24.840000, 30.510000, 40.500000, 86.220000, 6.660000},
            {35.860000, -92.290000, -46.090000, 16.830000, 30.360000, 37.290000, 49.500000, 105.380000, 8.140000},
            {-65.200000, 167.800000, 83.800000, -30.600000, -55.200000, -67.800000, -90.000000, -191.600000, -14.800000},
            {-52.160000, 134.240000, 67.040000, -24.480000, -44.160000, -54.240000, -72.000000, -153.280000, -11.840000},
            {3.260000, -8.390000, -4.190000, 1.530000, 2.760000, 3.390000, 4.500000, 9.580000, 0.740000}
        };
        private static readonly double[,] Temp056 =
        {
            {-39.120000, 100.680000, 50.280000, -18.360000, -33.120000, -40.680000, -54.000000, -114.960000, -8.880000},
            {0.000000, 0.000000, 0.000000, -0.000000, -0.000000, 0.000000, -0.000000, 0.000000, -0.000000},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -0.000000, -0.000000, 0.000000},
            {0.000000, 0.000000, 0.000000, -0.000000, -0.000000, 0.000000, -0.000000, 0.000000, -0.000000},
            {0.000000, 0.000000, 0.000000, -0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000},
            {0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
        };


        // data for ForwardReduction() test.
        // a size 3 list of arguments for the test routine.
        private static readonly List<object> NSForwardReduction_L = new List<object>();

        // In the following test cases, 4-digit tests are manually added by Eric.
        private static readonly double[,] Temp1065 =
        {
          {0.000000, 2.000000, 2.000000},
          {1.000000, 0.000000, 0.000000},
          {0.000000, 4.000000, 4.000000},
        };

        private static readonly double[,] Temp1066 =
        {
          {1.000000, 0.000000, 0.000000},
          {0.000000, 2.000000, 2.000000},
          {0.000000, 0.000000, 0.000000},
        };

        private static readonly double[,] Temp1068 =
        {
          {5.000000, 5.000000, 0.000000},
          {1.000000, 1.000000, 0.000000},
          {0.000000, 1.000000, 0.000000},
        };

        private static readonly double[,] Temp1069 =
        {
          {5.000000, 5.000000, 0.000000},
          {0.000000, 1.000000, 0.000000},
          {0.000000, 0.000000, 0.000000},
        };

        private static readonly double[,] Temp1071 =
        {
          {0.000000, 0.000000, 0.000000, 0.000000, 1.000000},
          {0.000000, 0.000000, 4.000000, 0.000000, 1.000000},
          {0.000000, 0.000000, 1.000000, 0.000000, 0.000000},
          {0.000000, 1.000000, 0.000000, 0.000000, 0.000000},
        };

        private static readonly double[,] Temp1072 =
        {
          {0.000000, 1.000000, 0.000000, 0.000000, 0.000000},
          {0.000000, 0.000000, 4.000000, 0.000000, 1.000000},
          {0.000000, 0.000000, 0.000000, 0.000000, -0.250000},
          {0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
        };

        // random dimensions matrix, (m, n) = (3, 4)
        private static readonly double[,] Temp058 =
        {
            {5.670000, -1.800000, 9.830000, 1.070000},
            {-4.680000, -5.780000, 6.960000, -6.840000},
            {-5.340000, 6.410000, 0.360000, 3.950000}
        };
        private static readonly double[,] Temp059 =
        {
            {5.670000, -1.800000, 9.830000, 1.070000},
            {0.000000, -7.265714, 15.073651, -5.956825},
            {0.000000, 0.000000, 19.399258, 1.092308}
        };

        // random dimensions matrix, (m, n) = (14, 15)
        private static readonly double[,] Temp061 =
        {
            {6.050000, -0.800000, -3.910000, 9.490000, 4.860000, 7.080000, 2.220000, 0.260000, 0.950000, -0.160000, 6.540000, 1.080000, -0.510000, -7.050000, -9.980000},
            {-8.830000, -2.990000, -5.540000, 1.810000, -2.570000, -5.550000, 6.410000, 1.970000, -7.450000, 8.360000, 8.140000, 9.410000, 6.310000, -7.150000, 8.180000},
            {6.300000, -8.620000, 0.780000, -8.460000, 5.310000, -2.230000, 7.210000, -3.340000, 5.710000, -1.330000, -2.900000, 3.140000, 8.410000, -2.350000, -4.280000},
            {1.250000, -0.570000, 8.360000, -0.430000, 9.430000, 4.210000, 8.790000, 5.620000, 2.440000, 3.700000, 0.910000, 7.110000, 3.790000, 6.600000, 1.880000},
            {-3.330000, 2.240000, 4.380000, -8.170000, -0.880000, -9.840000, -3.810000, -2.320000, -6.320000, 0.650000, 1.740000, 7.550000, -1.110000, -4.460000, 1.750000},
            {9.980000, -0.120000, 8.480000, 7.930000, 0.930000, -0.550000, -2.370000, 5.940000, 4.630000, 3.450000, -3.810000, 7.190000, -2.970000, -7.590000, 3.340000},
            {1.490000, -9.160000, -6.280000, 0.560000, -4.770000, -6.080000, -2.570000, 9.710000, -7.490000, 8.520000, -9.920000, -0.570000, -3.200000, 9.910000, -2.120000},
            {-6.640000, 3.580000, -1.350000, 5.740000, -7.030000, -1.340000, -6.780000, -7.920000, -6.430000, 9.920000, 1.430000, 7.790000, -0.320000, -5.800000, -2.500000},
            {1.450000, -4.720000, -0.490000, 3.630000, 1.890000, -0.100000, -3.760000, -5.090000, -9.250000, -1.490000, -5.750000, -3.300000, -2.990000, 8.090000, 2.390000},
            {-6.550000, 5.840000, 2.130000, 7.770000, -6.840000, -3.790000, -7.280000, -0.370000, 4.590000, 5.210000, 7.510000, 8.710000, 3.150000, -1.200000, 4.660000},
            {5.470000, -5.530000, -4.650000, -2.850000, -3.390000, -7.720000, -7.240000, 0.200000, -9.770000, -3.310000, 8.600000, -7.680000, 7.550000, -8.820000, 3.550000},
            {7.820000, -4.580000, 8.420000, -8.980000, -2.030000, 7.200000, -1.340000, 7.970000, 6.140000, -4.860000, -6.180000, 5.610000, -3.800000, 7.260000, -6.270000},
            {4.530000, 5.240000, 4.400000, 1.220000, 2.000000, 7.320000, 3.420000, 1.470000, 4.890000, 7.300000, -7.110000, 7.820000, -6.620000, 3.610000, 9.890000},
            {1.870000, 0.830000, -5.350000, 1.190000, -7.340000, 9.870000, -3.590000, 2.750000, -7.790000, -2.060000, -9.210000, -7.610000, -5.590000, 1.740000, -6.220000}
        };
        private static readonly double[,] Temp062 =
        {
            {6.050000, -0.800000, -3.910000, 9.490000, 4.860000, 7.080000, 2.220000, 0.260000, 0.950000, -0.160000, 6.540000, 1.080000, -0.510000, -7.050000, -9.980000},
            {0.000000, -4.157603, -11.246661, 15.660694, 4.523190, 4.783289, 9.650099, 2.349471, -6.063471, 8.126479, 17.685157, 10.986264, 5.565653, -17.439504, -6.385851},
            {-0.000000, 0.000000, 25.915893, -47.673692, -8.222491, -18.561376, -13.175794, -8.011163, 16.077262, -16.383798, -42.833489, -18.561244, -1.483060, 37.654470, 18.072714},
            {0.000000, 0.000000, 0.000000, 14.963468, 11.241655, 9.631831, 12.609540, 8.509978, -3.532603, 9.429949, 14.799198, 13.167636, 3.940886, -5.156860, -2.593151},
            {-0.000000, 0.000000, 0.000000, 0.000000, 3.685075, -5.104017, 1.110254, -1.393292, -7.025694, 3.056163, 9.644476, 11.910697, 1.137241, -12.406155, -4.843618},
            {-0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -36.156398, -7.954174, -6.579493, -31.768584, 15.035682, 33.118233, 51.968072, 0.209697, -64.907978, -7.805152},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -7.227581, 10.433626, -9.273054, 4.071878, -9.061730, -4.860326, -11.067221, 20.808454, -7.645342},
            {-0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -17.080871, 1.822519, 3.872911, 5.889895, 11.003196, 8.259905, -17.294081, -8.867125},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.523447, -18.104557, -2.663915, -18.012297, -3.684541, 6.322601, 22.279236},
            {-0.000000, 0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 437.085265, 69.974856, 438.700882, 97.022367, -149.402471, -543.633784},
            {-0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 16.458032, -2.212434, 15.492408, -6.929842, 5.564097},
            {-0.000000, 0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 33.712294, -20.785752, -11.790593, -25.903017},
            {-0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 2.071533, 12.733040, 24.084249},
            {-0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -58.418360, -117.033347}
        };

        // random dimensions matrix, (m, n) = (5, 6)
        private static readonly double[,] Temp064 =
        {
            {-4.590000, 1.610000, -7.960000, 5.380000, 5.920000, -5.960000},
            {6.090000, 3.890000, 6.560000, 1.830000, 5.260000, -2.040000},
            {-7.490000, 1.630000, -4.220000, -2.820000, -9.730000, 9.950000},
            {-5.070000, 3.290000, 5.230000, -7.220000, -4.330000, -3.680000},
            {-6.110000, 4.040000, -9.330000, -2.020000, 7.480000, -3.680000}
        };
        private static readonly double[,] Temp065 =
        {
            {-4.590000, 1.610000, -7.960000, 5.380000, 5.920000, -5.960000},
            {0.000000, 6.026144, -4.001307, 8.968170, 13.114641, -9.947712},
            {0.000000, 0.000000, 8.107054, -10.115068, -17.220083, 18.029422},
            {0.000000, 0.000000, 0.000000, 3.335667, 17.757958, -28.018265},
            {-0.000000, 0.000000, 0.000000, 0.000000, 47.968868, -72.597429}
        };


        // data for BackwardReduction() test.
        // a size 3 list of arguments for the test routine.
        private static readonly List<object> SBackwardReduction_L = new List<object>();

        // In the following test cases, 4-digit tests are manually added by Eric.
        // Input Matrices are taken from expected values of the extra test cases
        // to ForwardReduction.
        private static readonly double[,] Temp1089 =
        {
          {1.000000, 0.000000, 0.000000},
          {0.000000, 2.000000, 2.000000},
          {0.000000, 0.000000, 0.000000},
        };
        private static readonly double[,] Temp1090 =
        {
          {1.000000, 0.000000, 0.000000},
          {0.000000, 1.000000, 1.000000},
          {0.000000, 0.000000, 0.000000},
        };

        private static readonly double[,] Temp1092 =
        {
          {5.000000, 5.000000, 0.000000},
          {0.000000, 1.000000, 0.000000},
          {0.000000, 0.000000, 0.000000},
        };
        private static readonly double[,] Temp1093 =
        {
          {1.000000, 0.000000, 0.000000},
          {0.000000, 1.000000, 0.000000},
          {0.000000, 0.000000, 0.000000},
        };

        private static readonly double[,] Temp1095 =
        {
          {0.000000, 1.000000, 0.000000, 0.000000, 0.000000},
          {0.000000, 0.000000, 4.000000, 0.000000, 1.000000},
          {0.000000, 0.000000, 0.000000, 0.000000, -0.250000},
          {0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
        };
        private static readonly double[,] Temp1096 =
        {
          {0.000000, 1.000000, 0.000000, 0.000000, 0.000000},
          {0.000000, 0.000000, 1.000000, 0.000000, 0.000000},
          {0.000000, 0.000000, 0.000000, 0.000000, 1.000000},
          {0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
        };

        // random dimensions matrix, (m, n) = (3, 8)
        private static readonly double[,] Temp067 =
        {
            {-49.200000, -128.800000, -70.200000, -94.400000, -26.800000, 75.000000, -117.800000, -81.800000},
            {0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000}
        };
        private static readonly double[,] Temp068 =
        {
            {1.000000, 2.617886, 1.426829, 1.918699, 0.544715, -1.524390, 2.394309, 1.662602},
            {0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000}
        };

        // random dimensions matrix, (m, n) = (3, 13)
        private static readonly double[,] Temp070 =
        {
            {-3.940000, 2.250000, 7.570000, -2.630000, -1.140000, -3.950000, 6.820000, 3.600000, -9.640000, 1.410000, -1.440000, 7.780000, -4.280000},
            {0.000000, -3.558249, 12.940025, -9.295914, -5.502487, -6.707741, 14.659442, 7.106802, -23.232437, -5.658503, 2.685279, 8.312589, -4.103198},
            {0.000000, 0.000000, 37.684150, -32.146682, -14.935704, -19.801058, 38.575255, 26.242509, -80.501408, -17.310988, 12.544895, 34.073117, -20.156895}
        };
        private static readonly double[,] Temp071 =
        {
            {1.000000, -0.000000, -0.000000, -1.251159, -0.412155, -0.021711, 0.008946, 0.729899, -2.365450, -1.286328, 1.265462, 0.306251, -0.393712},
            {-0.000000, 1.000000, -0.000000, -0.489749, 0.105065, -0.025734, -0.397226, 0.535201, -1.239437, -0.080310, 0.455955, 0.952007, -0.792047},
            {0.000000, 0.000000, 1.000000, -0.853056, -0.396339, -0.525448, 1.023647, 0.696381, -2.136214, -0.459371, 0.332896, 0.904176, -0.534891}
        };

        // random dimensions matrix, (m, n) = (8, 4)
        private static readonly double[,] Temp073 =
        {
            {-60.000000, -7.500000, -135.000000, 45.000000},
            {0.000000, 0.000000, 0.000000, 0.000000},
            {0.000000, 0.000000, 0.000000, 0.000000},
            {0.000000, 0.000000, -0.000000, 0.000000},
            {0.000000, 0.000000, 0.000000, -0.000000},
            {0.000000, 0.000000, 0.000000, 0.000000},
            {0.000000, 0.000000, 0.000000, 0.000000},
            {0.000000, 0.000000, 0.000000, 0.000000}
        };
        private static readonly double[,] Temp074 =
        {
            {1.000000, 0.125000, 2.250000, -0.750000},
            {0.000000, 0.000000, 0.000000, 0.000000},
            {0.000000, 0.000000, 0.000000, 0.000000},
            {0.000000, 0.000000, -0.000000, 0.000000},
            {0.000000, 0.000000, 0.000000, -0.000000},
            {0.000000, 0.000000, 0.000000, 0.000000},
            {0.000000, 0.000000, 0.000000, 0.000000},
            {0.000000, 0.000000, 0.000000, 0.000000}
        };


        // data for BackwardReduction() test.
        // a size 3 list of arguments for the test routine.
        private static readonly List<object> NSBackwardReduction_L = new List<object>();


        // random dimensions matrix, (m, n) = (12, 13)
        private static readonly double[,] Temp076 =
        {
            {6.910000, 9.250000, -1.210000, 1.730000, 1.420000, 0.960000, -3.690000, -6.630000, -2.400000, 6.730000, -6.140000, 9.940000, 4.340000},
            {0.000000, -11.585615, 1.135297, 3.952344, -10.308365, 5.270260, 13.249624, 7.212576, 7.789349, -2.148799, 10.862084, -2.748553, -6.080072},
            {0.000000, 0.000000, -8.299117, 11.839342, 9.476001, 9.732539, -10.765564, 0.606219, 5.368275, -2.210216, -0.158024, 11.643661, -4.125830},
            {0.000000, 0.000000, 0.000000, 3.636379, -0.312514, 2.497762, -13.753281, 9.054617, -8.584010, -2.034273, 3.007246, 0.477679, 2.470234},
            {0.000000, -0.000000, 0.000000, -0.000000, 14.036490, -9.908708, 23.623786, -5.176927, 17.860091, -1.921221, -2.668430, 0.776849, -14.421947},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -11.641566, -26.919661, 7.671765, -29.545480, -8.027747, -4.013273, -18.280849, 12.728336},
            {0.000000, -0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 42.649095, -3.230822, 24.749548, 8.027395, 19.546498, 18.906200, -32.444887},
            {0.000000, -0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 4.424683, 15.578191, 6.858998, 11.611015, 11.677348, 1.741511},
            {0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 122.955267, 40.234910, 38.405662, 52.314970, 48.450490},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 6.387214, -0.204057, -7.098646, -0.791839},
            {0.000000, -0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 28.124362, 42.347437, 0.929907},
            {0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.197060, -6.041805}
        };
        private static readonly double[,] Temp077 =
        {
            {1.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -60.704265},
            {-0.000000, 1.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -24.201818},
            {-0.000000, -0.000000, 1.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -8.220601},
            {0.000000, 0.000000, 0.000000, 1.000000, -0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 29.588682},
            {0.000000, -0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -26.044009},
            {-0.000000, -0.000000, -0.000000, 0.000000, -0.000000, 1.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -36.328537},
            {0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 7.446929},
            {0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 21.416161},
            {0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, -8.869024},
            {0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 32.476978},
            {0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, -46.131982},
            {-0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 1.000000, 30.659764}
        };

        // random dimensions matrix, (m, n) = (9, 10)
        private static readonly double[,] Temp079 =
        {
            {-1.900000, -5.590000, 9.700000, 0.210000, -5.850000, -2.640000, -6.910000, 4.000000, 2.410000, 3.260000},
            {0.000000, -25.855947, 24.057368, 4.537737, -21.435526, -11.667263, -25.564579, 19.017368, 16.918789, 0.750105},
            {0.000000, 0.000000, -5.498529, 1.172870, 1.361974, -8.025465, -3.382131, -4.752396, 11.658964, -13.350305},
            {0.000000, 0.000000, 0.000000, -7.939397, 5.093614, 17.195956, 17.840338, 22.860762, -20.901271, 18.096160},
            {0.000000, 0.000000, 0.000000, 0.000000, 6.321927, -31.489846, -19.835587, -11.440150, 41.396451, -29.652279},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 43.166176, 51.226107, 25.232586, -71.915908, 37.514699},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 43.799540, 37.084184, -27.939694, -8.626982},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 13.964826, 5.835431, -10.616349},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -3.685012, -4.260322}
        };
        private static readonly double[,] Temp080 =
        {
            {1.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 2.370549},
            {-0.000000, 1.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.257752},
            {-0.000000, -0.000000, 1.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 1.678202},
            {-0.000000, -0.000000, -0.000000, 1.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -2.679093},
            {0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1.386332},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.631277},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 1.593222},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 1.000000, 0.000000, -1.243325},
            {-0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, 1.000000, 1.156122}
        };

        // random dimensions matrix, (m, n) = (8, 9)
        private static readonly double[,] Temp082 =
        {
            {2.250000, 4.910000, -6.820000, 1.970000, -2.130000, 5.990000, 0.740000, 6.000000, -8.610000},
            {0.000000, 18.567200, -24.354400, 2.982400, -1.139600, 11.940800, 6.140800, 15.300000, -16.391200},
            {0.000000, 0.000000, 5.319520, 0.420467, 4.079132, -1.800378, 5.851071, -1.841983, -2.997986},
            {0.000000, 0.000000, 0.000000, 5.063836, -21.675028, 13.682339, -25.592491, -6.068392, 3.518123},
            {0.000000, 0.000000, 0.000000, 0.000000, -9.985317, -14.316031, -8.110637, 0.325906, 28.108470},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 50.307081, 2.706091, 2.543379, -91.629518},
            {0.000000, 0.000000, 0.000000, -0.000000, 0.000000, -0.000000, 2.486916, -3.603232, 21.488683},
            {0.000000, 0.000000, 0.000000, -0.000000, 0.000000, -0.000000, 0.000000, -11.304774, 28.389519}
        };
        private static readonly double[,] Temp083 =
        {
            {1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -5.066042},
            {0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -8.041946},
            {0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -5.253622},
            {0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 10.529868},
            {-0.000000, -0.000000, -0.000000, 0.000000, 1.000000, -0.000000, -0.000000, -0.000000, -4.144871},
            {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, -1.963514},
            {0.000000, 0.000000, 0.000000, -0.000000, 0.000000, -0.000000, 1.000000, 0.000000, 5.002155},
            {-0.000000, -0.000000, -0.000000, 0.000000, -0.000000, 0.000000, -0.000000, 1.000000, -2.511286}
        };


        // data for GaussElimination() test.
        // a size 3 list of arguments for the test routine.
        private static readonly List<object> GaussElimination_L = new List<object>();

        // random square matrix, order 8.
        private static readonly double[,] Temp085 =
        {
            {8.890000, 8.110000, 4.570000, 8.620000, -0.810000, -1.830000, 1.570000, -1.870000},
            {-1.790000, 5.620000, 0.270000, -3.210000, 3.380000, -3.590000, -4.880000, 2.890000},
            {-3.460000, 3.720000, -5.280000, 7.240000, -9.490000, -2.740000, -1.820000, -2.950000},
            {2.140000, 8.930000, -7.790000, 6.160000, 0.230000, 4.890000, 3.420000, -2.580000},
            {-6.640000, 3.310000, -2.640000, -1.760000, 2.010000, -5.820000, 0.230000, 9.560000},
            {-2.360000, -8.130000, -8.900000, 6.810000, -7.130000, 6.780000, 9.230000, -9.980000},
            {6.420000, 0.270000, -3.770000, -1.650000, -2.480000, 8.660000, 1.970000, -7.380000},
            {-2.640000, -9.440000, -9.890000, -6.280000, 9.810000, 3.860000, 7.240000, -4.560000}
        };
        private static readonly double[] Temp086 = {-4.810000, -0.010000, 3.670000, -0.600000, 5.740000, 8.490000, -4.480000, -4.470000};
        private static readonly double[] Temp087 = {-2.485551, 1.516893, 1.736113, -1.004421, -0.717809, 0.179610, 2.108789, -1.147103};
        // random square matrix, order 11.
        private static readonly double[,] Temp089 =
        {
            {-0.440000, -5.930000, -4.500000, 6.560000, -1.440000, -5.580000, 6.590000, 4.690000, -7.180000, 4.850000, -4.820000},
            {0.010000, 6.840000, -4.670000, 0.810000, -7.070000, -2.320000, 1.490000, 3.370000, -9.960000, 1.570000, 6.630000},
            {-6.090000, -2.100000, -5.640000, 9.750000, 5.040000, 5.700000, -1.110000, -5.460000, 1.110000, -9.110000, -2.360000},
            {2.020000, -7.170000, -1.950000, 7.640000, -8.660000, -0.140000, 1.230000, -8.230000, 1.510000, 3.720000, -5.330000},
            {2.630000, 6.770000, -4.280000, 3.100000, -1.700000, 7.170000, -5.790000, 0.720000, -2.430000, 0.840000, 7.830000},
            {-1.070000, 5.410000, -1.310000, 8.500000, -7.310000, 9.140000, 7.380000, 5.340000, 4.540000, -4.200000, 4.740000},
            {3.680000, -6.980000, 1.340000, 5.420000, -5.480000, -6.440000, -4.740000, -8.640000, 0.770000, 4.410000, -6.680000},
            {-5.050000, 9.640000, 2.690000, 6.680000, 3.980000, 6.330000, -2.310000, 8.760000, -8.550000, -2.240000, 5.640000},
            {-9.740000, 9.360000, 8.620000, -3.980000, 6.490000, 2.740000, 9.150000, -1.280000, 7.350000, -1.570000, 9.320000},
            {2.060000, -4.390000, -2.590000, -7.450000, -8.330000, -4.790000, -0.970000, -2.590000, -8.070000, 8.910000, 2.090000},
            {6.350000, -9.220000, 5.390000, 7.870000, -6.960000, 4.150000, 8.640000, -9.860000, -6.950000, -3.440000, -2.630000}
        };
        private static readonly double[] Temp090 = {4.830000, 8.830000, -8.940000, -6.180000, 5.490000, -8.450000, 0.550000, -6.320000, 0.600000, 9.750000, 6.340000};
        private static readonly double[] Temp091 = {1.290086, -1.136869, -0.200842, 0.397185, 0.796234, -1.370759, 0.222362, -0.058496, -0.084244, -0.155377, 2.572176};
        // random square matrix, order 3.
        private static readonly double[,] Temp093 =
        {
            {9.310000, 6.430000, -3.370000},
            {-3.260000, 3.870000, -7.970000},
            {9.970000, 2.850000, -4.700000}
        };
        private static readonly double[] Temp094 = {-2.840000, -6.160000, -5.780000};
        private static readonly double[] Temp095 = {-0.199457, 0.395639, 1.046594};


        private static void PopulateRowScaling_L()
        {
            var Temp000 = new List<object>();
            Temp000.Add(new Matrix(Temp001));
            Temp000.Add(Temp002);
            Temp000.Add(Temp003);
            Temp000.Add(new Matrix(Temp004));
            RowScaling_L.Add(Temp000);
            var Temp005 = new List<object>();
            Temp005.Add(new Matrix(Temp006));
            Temp005.Add(Temp007);
            Temp005.Add(Temp008);
            Temp005.Add(new Matrix(Temp009));
            RowScaling_L.Add(Temp005);
            var Temp010 = new List<object>();
            Temp010.Add(new Matrix(Temp011));
            Temp010.Add(Temp012);
            Temp010.Add(Temp013);
            Temp010.Add(new Matrix(Temp014));
            RowScaling_L.Add(Temp010);
        }

        private static void PopulateRowInterChange_L()
        {
            var Temp015 = new List<object>();
            Temp015.Add(new Matrix(Temp016));
            Temp015.Add(Temp017);
            Temp015.Add(Temp018);
            Temp015.Add(new Matrix(Temp019));
            RowInterChange_L.Add(Temp015);
            var Temp020 = new List<object>();
            Temp020.Add(new Matrix(Temp021));
            Temp020.Add(Temp022);
            Temp020.Add(Temp023);
            Temp020.Add(new Matrix(Temp024));
            RowInterChange_L.Add(Temp020);
            var Temp025 = new List<object>();
            Temp025.Add(new Matrix(Temp026));
            Temp025.Add(Temp027);
            Temp025.Add(Temp028);
            Temp025.Add(new Matrix(Temp029));
            RowInterChange_L.Add(Temp025);
        }

        private static void PopulateRowReplacement_L()
        {
            var Temp030 = new List<object>();
            Temp030.Add(new Matrix(Temp031));
            Temp030.Add(Temp032);
            Temp030.Add(Temp034);
            Temp030.Add(Temp033);
            Temp030.Add(new Matrix(Temp035));
            RowReplacement_L.Add(Temp030);
            var Temp036 = new List<object>();
            Temp036.Add(new Matrix(Temp037));
            Temp036.Add(Temp038);
            Temp036.Add(Temp040);
            Temp036.Add(Temp039);
            Temp036.Add(new Matrix(Temp041));
            RowReplacement_L.Add(Temp036);
            var Temp042 = new List<object>();
            Temp042.Add(new Matrix(Temp043));
            Temp042.Add(Temp044);
            Temp042.Add(Temp046);
            Temp042.Add(Temp045);
            Temp042.Add(new Matrix(Temp047));
            RowReplacement_L.Add(Temp042);
        }

        // Again 4-digits test cases are added by Eric
        private static void PopulateSForwardReduction_L()
        {
          var Temp1064 = new List<object>();
          Temp1064.Add(new Matrix(Temp1065));
          Temp1064.Add(new Matrix(Temp1066));
          SForwardReduction_L.Add(Temp1064);
          var Temp1067 = new List<object>();
          Temp1067.Add(new Matrix(Temp1068));
          Temp1067.Add(new Matrix(Temp1069));
          SForwardReduction_L.Add(Temp1067);
          var Temp1070 = new List<object>();
          Temp1070.Add(new Matrix(Temp1071));
          Temp1070.Add(new Matrix(Temp1072));
          SForwardReduction_L.Add(Temp1070);

            var Temp048 = new List<object>();
            Temp048.Add(new Matrix(Temp049));
            Temp048.Add(new Matrix(Temp050));
            SForwardReduction_L.Add(Temp048);
            var Temp051 = new List<object>();
            Temp051.Add(new Matrix(Temp052));
            Temp051.Add(new Matrix(Temp053));
            SForwardReduction_L.Add(Temp051);
            var Temp054 = new List<object>();
            Temp054.Add(new Matrix(Temp055));
            Temp054.Add(new Matrix(Temp056));
            SForwardReduction_L.Add(Temp054);
        }

        private static void PopulateNSForwardReduction_L()
        {
            var Temp057 = new List<object>();
            Temp057.Add(new Matrix(Temp058));
            Temp057.Add(new Matrix(Temp059));
            NSForwardReduction_L.Add(Temp057);
            var Temp060 = new List<object>();
            Temp060.Add(new Matrix(Temp061));
            Temp060.Add(new Matrix(Temp062));
            NSForwardReduction_L.Add(Temp060);
            var Temp063 = new List<object>();
            Temp063.Add(new Matrix(Temp064));
            Temp063.Add(new Matrix(Temp065));
            NSForwardReduction_L.Add(Temp063);
        }

        private static void PopulateSBackwardReduction_L()
        {
            // Again 4-digit cases are manually added.
            var Temp1088 = new List<object>();
            Temp1088.Add(new Matrix(Temp1089));
            Temp1088.Add(new Matrix(Temp1090));
            SBackwardReduction_L.Add(Temp1088);
            var Temp1091 = new List<object>();
            Temp1091.Add(new Matrix(Temp1092));
            Temp1091.Add(new Matrix(Temp1093));
            SBackwardReduction_L.Add(Temp1091);
            var Temp1094 = new List<object>();
            Temp1094.Add(new Matrix(Temp1095));
            Temp1094.Add(new Matrix(Temp1096));
            SBackwardReduction_L.Add(Temp1094);

            var Temp066 = new List<object>();
            Temp066.Add(new Matrix(Temp067));
            Temp066.Add(new Matrix(Temp068));
            SBackwardReduction_L.Add(Temp066);
            var Temp069 = new List<object>();
            Temp069.Add(new Matrix(Temp070));
            Temp069.Add(new Matrix(Temp071));
            SBackwardReduction_L.Add(Temp069);
            var Temp072 = new List<object>();
            Temp072.Add(new Matrix(Temp073));
            Temp072.Add(new Matrix(Temp074));
            SBackwardReduction_L.Add(Temp072);
        }

        private static void PopulateNSBackwardReduction_L()
        {
            var Temp075 = new List<object>();
            Temp075.Add(new Matrix(Temp076));
            Temp075.Add(new Matrix(Temp077));
            NSBackwardReduction_L.Add(Temp075);
            var Temp078 = new List<object>();
            Temp078.Add(new Matrix(Temp079));
            Temp078.Add(new Matrix(Temp080));
            NSBackwardReduction_L.Add(Temp078);
            var Temp081 = new List<object>();
            Temp081.Add(new Matrix(Temp082));
            Temp081.Add(new Matrix(Temp083));
            NSBackwardReduction_L.Add(Temp081);
        }

        private static void PopulateGaussElimination_L()
        {
            var Temp084 = new List<object>();
            Temp084.Add(new Matrix(Temp085));
            Temp084.Add(new Vector(Temp086));
            Temp084.Add(new Vector(Temp087));
            GaussElimination_L.Add(Temp084);
            var Temp088 = new List<object>();
            Temp088.Add(new Matrix(Temp089));
            Temp088.Add(new Vector(Temp090));
            Temp088.Add(new Vector(Temp091));
            GaussElimination_L.Add(Temp088);
            var Temp092 = new List<object>();
            Temp092.Add(new Matrix(Temp093));
            Temp092.Add(new Vector(Temp094));
            Temp092.Add(new Vector(Temp095));
            GaussElimination_L.Add(Temp092);
        }

        private static void InitAllLists()
        {
            PopulateRowScaling_L();
            PopulateRowInterChange_L();
            PopulateRowReplacement_L();
            PopulateSForwardReduction_L();
            PopulateNSForwardReduction_L();
            PopulateSBackwardReduction_L();
            PopulateNSBackwardReduction_L();
            PopulateGaussElimination_L();
        }

        // result lists for the tests
        private static readonly List<bool> res_RowScaling_L = new List<bool>();
        private static readonly List<bool> res_RowInterChange_L = new List<bool>();
        private static readonly List<bool> res_RowReplacement_L = new List<bool>();
        private static readonly List<bool> res_SForwardReduction_L = new List<bool>();
        private static readonly List<bool> res_NSForwardReduction_L = new List<bool>();
        private static readonly List<bool> res_SBackwardReduction_L = new List<bool>();
        private static readonly List<bool> res_NSBackwardReduction_L = new List<bool>();
        private static readonly List<bool> res_GaussElimination_L = new List<bool>();

        //Routine that runs the differents tests, to be called by Main
        private static void RunTests()
        {
            foreach (List<object> item in RowScaling_L)
            {
                res_RowScaling_L.Add(TestRowScaling((Matrix)item[0], (int)item[1], (double)item[2], (Matrix)item[3]));
            }

            foreach (List<object> item in RowInterChange_L)
            {
                res_RowInterChange_L.Add(TestRowInterchange((Matrix)item[0], (int)item[1], (int)item[2], (Matrix)item[3]));
            }

            foreach (List<object> item in RowReplacement_L)
            {
                res_RowReplacement_L.Add(TestRowReplacement((Matrix)item[0], (int)item[1], (double)item[2], (int)item[3], (Matrix)item[4]));
            }

            foreach (List<object> item in SForwardReduction_L)
            {
                res_SForwardReduction_L.Add(TestForwardReduction("Singular matrix", (Matrix)item[0], (Matrix)item[1]));
            }

            foreach (List<object> item in NSForwardReduction_L)
            {
                res_NSForwardReduction_L.Add(TestForwardReduction("Non singular matrix", (Matrix)item[0], (Matrix)item[1]));
            }

            foreach (List<object> item in SBackwardReduction_L)
            {
                res_SBackwardReduction_L.Add(TestBackwardReduction("Singular matrix", (Matrix)item[0], (Matrix)item[1]));
            }

            foreach (List<object> item in NSBackwardReduction_L)
            {
                res_NSBackwardReduction_L.Add(TestBackwardReduction("Non singular matrix", (Matrix)item[0], (Matrix)item[1]));
            }

            foreach (List<object> item in GaussElimination_L)
            {
                res_GaussElimination_L.Add(TestGaussElimination((Matrix)item[0], (Vector)item[1], (Vector)item[2]));
            }

        }

        // call the reporting routine for each case tested
        private static void PrintReport()
        {
            var Temp096 = PrintSummary(res_RowScaling_L, "Matrix.ElementaryRowScaling");
            Console.WriteLine("".PadRight(Temp096, '='));

            Console.WriteLine();
            var Temp097 = PrintSummary(res_RowInterChange_L, "Matrix.ElementaryRowInterchange");
            Console.WriteLine("".PadRight(Temp097, '='));

            Console.WriteLine();
            var Temp098 = PrintSummary(res_RowReplacement_L, "Matrix.ElementaryRowReplacement");
            Console.WriteLine("".PadRight(Temp098, '='));

            Console.WriteLine();
            List<bool> Temp099 = res_SForwardReduction_L.Concat(res_NSForwardReduction_L).ToList();
            var Temp100 = PrintSummary(Temp099, "Matrix.ForwardReduction");
            PrintSummary(res_SForwardReduction_L, "(Singular matrix) Matrix.ForwardReduction", prefix : "", padd : 55);
            PrintSummary(res_NSForwardReduction_L, "(Non Square matrix) Matrix.ForwardReduction", prefix : "", padd : 55);
            Console.WriteLine("".PadRight(Temp100, '='));

            Console.WriteLine();
            List<bool> Temp101 = res_SBackwardReduction_L.Concat(res_NSBackwardReduction_L).ToList();
            var Temp102 = PrintSummary(Temp101, "Matrix.BackwardReduction");
            PrintSummary(res_SBackwardReduction_L, "(Singular matrix) Matrix.BackwardReduction", prefix : "", padd : 55);
            PrintSummary(res_NSBackwardReduction_L, "(Non Square matrix) Matrix.BackwardReduction", prefix : "", padd : 55);
            Console.WriteLine("".PadRight(Temp102, '='));

            Console.WriteLine();
            var Temp103 = PrintSummary(res_GaussElimination_L, "Matrix.GaussElimination");
            Console.WriteLine("".PadRight(Temp103, '='));

            Console.WriteLine();
        }

    }
}
